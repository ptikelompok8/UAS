{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\willb\\\\Documents\\\\GitHub\\\\UAS\\\\src\\\\routes\\\\YouTubeVideo.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst YouTubeVideo = () => {\n  _s();\n  const [videoInfo, setVideoInfo] = useState(null);\n  const videoUrl = 'https://www.youtube.com/watch?v=RHijwy_4FrQ';\n  const videoId = extractVideoId(videoUrl);\n  useEffect(() => {\n    const fetchVideoInfo = async () => {\n      try {\n        const response = await axios.get('https://www.googleapis.com/youtube/v3/videos', {\n          params: {\n            part: 'snippet',\n            id: videoId,\n            key: 'AIzaSyCHTlvuDTn2Oyr6b5CWbCPR2_OqwyHZ2o0' // Replace with your API key\n          }\n        });\n        const snippet = response.data.items[0].snippet;\n        setVideoInfo({\n          videoId,\n          snippet\n        });\n      } catch (error) {\n        console.error('Error fetching video data: ', error);\n      }\n    };\n    fetchVideoInfo();\n  }, [videoId]);\n  function extractVideoId(url) {\n    const regex = /[?&]([^=#]+)=([^&#]*)/g;\n    let match;\n    while (match = regex.exec(url)) {\n      if (match[1] === 'v') {\n        return match[2];\n      }\n    }\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      maxWidth: 'auto',\n      margin: 'auto',\n      textAlign: 'center'\n    },\n    children: videoInfo && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        style: {\n          marginTop: '20px'\n        },\n        children: videoInfo.snippet.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: videoInfo.snippet.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n        title: \"YouTube Video\",\n        width: \"560\",\n        height: \"315\",\n        src: \"https://www.youtube.com/embed/\".concat(videoInfo.videoId),\n        frameBorder: \"0\",\n        allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n        allowFullScreen: true,\n        style: {\n          margin: '20px 0'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n};\n_s(YouTubeVideo, \"Z94XmlQCWjbByxVhJOpfFuamkk0=\");\n_c = YouTubeVideo;\nexport default YouTubeVideo;\nvar _c;\n$RefreshReg$(_c, \"YouTubeVideo\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","YouTubeVideo","_s","videoInfo","setVideoInfo","videoUrl","videoId","extractVideoId","fetchVideoInfo","response","get","params","part","id","key","snippet","data","items","error","console","url","regex","match","exec","style","maxWidth","margin","textAlign","children","marginTop","title","fileName","_jsxFileName","lineNumber","columnNumber","description","width","height","src","concat","frameBorder","allow","allowFullScreen","_c","$RefreshReg$"],"sources":["C:/Users/willb/Documents/GitHub/UAS/src/routes/YouTubeVideo.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst YouTubeVideo = () => {\r\n  const [videoInfo, setVideoInfo] = useState(null);\r\n  const videoUrl = 'https://www.youtube.com/watch?v=RHijwy_4FrQ';\r\n  const videoId = extractVideoId(videoUrl);\r\n\r\n  useEffect(() => {\r\n    const fetchVideoInfo = async () => {\r\n      try {\r\n        const response = await axios.get('https://www.googleapis.com/youtube/v3/videos', {\r\n          params: {\r\n            part: 'snippet',\r\n            id: videoId,\r\n            key: 'AIzaSyCHTlvuDTn2Oyr6b5CWbCPR2_OqwyHZ2o0', // Replace with your API key\r\n          },\r\n        });\r\n        const snippet = response.data.items[0].snippet;\r\n        setVideoInfo({ videoId, snippet });\r\n      } catch (error) {\r\n        console.error('Error fetching video data: ', error);\r\n      }\r\n    };\r\n\r\n    fetchVideoInfo();\r\n  }, [videoId]);\r\n\r\n  function extractVideoId(url) {\r\n    const regex = /[?&]([^=#]+)=([^&#]*)/g;\r\n    let match;\r\n    while ((match = regex.exec(url))) {\r\n      if (match[1] === 'v') {\r\n        return match[2];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div style={{ maxWidth: 'auto', margin: 'auto', textAlign: 'center' }}>\r\n      {videoInfo && (\r\n        <div>\r\n          <h2 style={{ marginTop: '20px' }}>{videoInfo.snippet.title}</h2>\r\n          <p>{videoInfo.snippet.description}</p>\r\n          <iframe\r\n            title=\"YouTube Video\"\r\n            width=\"560\"\r\n            height=\"315\"\r\n            src={`https://www.youtube.com/embed/${videoInfo.videoId}`}\r\n            frameBorder=\"0\"\r\n            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\r\n            allowFullScreen\r\n            style={{ margin: '20px 0' }}\r\n          ></iframe>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default YouTubeVideo;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}